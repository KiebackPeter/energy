version: "3.8"

# TODO: make custom docker images
services:
  api:
    build:
      context: app
      dockerfile: api/api.Dockerfile
    restart: always
    ports:
      - 443:8000
    environment:
      - API_LOG_LEVEL=${API_LOG_LEVEL}
      - SIGN_KEY=${SIGN_KEY}
      - TOKEN_EXPIRE_MINUTES=${TOKEN_EXPIRE_MINUTES}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    volumes:
      - ./app/api:/code/app
    depends_on:
      - worker

  worker:
    build:
      context: app
      dockerfile: energy/energy.Dockerfile
    volumes:
      - ./app:/code/app
    environment:
      - CELERY_BROKER_URL=${BROKER_URL}
      - CELERY_RESULT_BACKEND=${BROKER_URL}
    depends_on:
      - broker
      - database

  # admin:
  #   build: app/admin
  #   command: bash -c "
  #   volumes:
  #     - ./app:/code/app
  #   # environment:
  #   #   - CELERY_BROKER_URL=${BROKER_URL}
  #   #   - CELERY_RESULT_BACKEND=${BROKER_URL}
  #   depends_on:
  #     - api
  #     - worker

  broker:
    image: redis:7

  database:
    image: postgres
    restart: always
    ports:
      - ${DB_PORT}:5432 # for forwarding to localhost
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - energy-database:/var/lib/postgresql/data

  broker-dashboard:
    build: .
    command: celery --broker=${BROKER_URL} flower --port=5555
    ports:
      - 5555:5555
    environment:
      - CELERY_BROKER_URL=${BROKER_URL}
      - CELERY_RESULT_BACKEND=${BROKER_URL}
    depends_on:
      - broker
      - worker

  database-dashboard:
    image: dpage/pgadmin4
    ports:
      - 8080:80
    environment:
      - PGADMIN_DEFAULT_SERVER=${DB_HOST}
      - PGADMIN_DEFAULT_EMAIL=admin@kieback-peter.nl
      - PGADMIN_DEFAULT_PASSWORD=admin
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - database

volumes:
  energy-database:
    # external: true
  pgadmin-data:
